#!/usr/bin/python3.8
import asyncio
import aiogram
import proxy_helper
from plotter import Plotter
import logging
from os import name, stat, environ
from random import shuffle
from datetime import datetime, timedelta

# path = "C:\\Projects\\tg-bot\\bot\\"  # DEBUG
path = '/code/'

logging.basicConfig(filename=f'{path}bot.log',
                    format='%(asctime)s    %(levelname)s: %(message)s',
                    datefmt='%d/%m/%Y %H:%M:%S',
                    level=logging.INFO)
logging.info('Program started')

ADMIN_ID = environ.get("ADMIN_IDs", "").split(",")
BOT_TOKEN = environ.get('BotToken', '1258153191:AAGosyTwZfoGuBPpZ7RV6jSdwPvRyVtvyTI')


async def doWeNeedProxy() -> bool:
    results = await asyncio.gather(proxy_helper.check_site('http://example.org/'), 
                                   proxy_helper.check_site(f'https://api.telegram.org/bot{BOT_TOKEN}/getMe'))
    logging.info(f'Internet test results:' 
                 f'example.org: {results[0]}, '
                 f'telegram: {results[1]}')
    if not results[0]:  # internet connection test
        raise OSError("No internet")
    elif results[0] and not results[1]:
        return True
    elif results[0] and results[1]:
        return False


KB_START = aiogram.types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
KB_START.add("/now", "/graph", "/raw", "/help")
KB_START2 = aiogram.types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
KB_START2.add("/now"); KB_START2.row(); KB_START2.add("/graph", "/raw")
KB_ADMIN = aiogram.types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True, row_width=2)
KB_ADMIN.add("/log", "/clear_log", "/back")

bt_month = aiogram.types.InlineKeyboardButton('–ú–µ—Å—è—Ü', callback_data='+month')
bt_day = aiogram.types.InlineKeyboardButton('–î–µ–Ω—å', callback_data='+day')
bt_3h = aiogram.types.InlineKeyboardButton('3 —á–∞—Å–∞', callback_data='+180')
bt_1h = aiogram.types.InlineKeyboardButton('1 —á–∞—Å', callback_data='+60')
bt_30min = aiogram.types.InlineKeyboardButton('–ü–æ–ª—á–∞—Å–∞', callback_data='+30')
bt_15min = aiogram.types.InlineKeyboardButton('15 –º–∏–Ω—É—Ç', callback_data='+15')
KB_CHOOSE_TIME = aiogram.types.InlineKeyboardMarkup()
KB_CHOOSE_TIME.add(bt_15min, bt_30min, bt_1h, bt_3h, bt_day); KB_CHOOSE_TIME.row(); KB_CHOOSE_TIME.add(bt_month)

loop = asyncio.get_event_loop()
isProxyNeeded = loop.run_until_complete(doWeNeedProxy())
if isProxyNeeded:
    proxyFinder = proxy_helper.ProxyGrabber(timeout=3,
                                        filename=f'{path}proxy.dat',
                                        site_to_test=f'https://api.telegram.org/bot{BOT_TOKEN}/getMe')
    PROXY = loop.run_until_complete(proxyFinder.grab())

# graphics = Plotter(data_path='C:\\Projects\\tg-bot\\bot\\data\\')  # DEBUG
graphics = Plotter(data_path='/meteo_data/')


if isProxyNeeded:
    BOT = aiogram.Bot(token=BOT_TOKEN, proxy=PROXY)
else:
    BOT = aiogram.Bot(token=BOT_TOKEN)
dp = aiogram.Dispatcher(BOT)


@dp.message_handler(commands=['start'])
async def send_welcome(message: aiogram.types.Message):
    asyncio.ensure_future(message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}! \n'
                                         f'–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ '
                                         f'—É–∑–Ω–∞—Ç—å –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ –≤ –¢—Ä–æ–∏—Ü–∫–µ!', 
                                         reply_markup=KB_START))


@dp.message_handler(commands=['help'])
async def send_help(message: aiogram.types.Message):
    asyncio.ensure_future(message.answer('–í—Å–µ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ –ø—Ä–æ—Å—Ç–æ:\n'
                                         '‚Ä¢ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø–∏—à–∏ /now\n'
                                         '‚Ä¢ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–ø–∏—à–∏ /graph\n'
                                         '‚Ä¢ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—ã—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞–ø–∏—à–∏ /raw\n\n'
                                         '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π?\n'
                                         '–ù–∞–ø–∏—à–∏ /info',
                                         reply_markup=KB_START2))


@dp.message_handler(commands=["info"])
async def send_info(message: aiogram.types.Message):
    asyncio.ensure_future(message.answer('–ì–¥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–∞–º–µ—Ä?\n'
                                         '–ú–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è —Ä–∞—Å–ø–æ–ª–≥–∞–µ—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: '
                                         '–≥.–ú–æ—Å–∫–≤–∞, –≥.–¢—Ä–æ–∏—Ü–∫, '
                                         '–°–∏—Ä–µ–Ω–µ–≤—ã–π –±—É–ª—å–≤–∞—Ä, –¥.1, —Å–Ω–∞—Ä—É–∂–∏ "–¢–æ—á–∫–∏ –ö–∏–ø–µ–Ω–∏—è"\n\n'
                                         '–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –¥–Ω—è?\n'
                                         '4:00-10:00 - —É—Ç—Ä–æ\n'
                                         '10:00-16:00 - –¥–µ–Ω—å\n'
                                         '16:00-22:00 - –≤–µ—á–µ—Ä\n'
                                         '22:00-4:00 - –Ω–æ—á—å\n\n'
                                         '–ß—Ç–æ —Ç–∞–∫–æ–µ —á–∞—Å—Ç–∏—Ü—ã PM2.5 –∏ PM10?\n'
                                         '–≠—Ç–æ –º–µ–ª–∫–æ–¥–∏—Å–ø–µ—Ä—Å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –ø—ã–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ, '
                                         '–±—É–∫–≤–∞–ª—å–Ω–æ, "–≤–∏—Ç–∞—é—Ç –≤ –≤–æ–∑–¥—É—Ö–µ". '
                                         '–ò–∑-–∑–∞ –∏—Ö –º–∞–ª—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ '
                                         '(2.5 –º–∫–º –∏ 10 –º–∫–º —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ) '
                                         '–∏ –≤–µ—Å–∞ –æ–Ω–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –æ—Å—è–¥–∞—é—Ç, '
                                         '—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∑–∞–≥—Ä—è–∑–Ω—è—è'
                                         ' –≤–æ–∑–¥—É—Ö, –∫–æ—Ç–æ—Ä—ã–º –º—ã –¥—ã—à–∏–º.\n'
                                         '–°–æ–≥–ª–∞—Å–Ω–æ –í–û–ó, —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —ç—Ç–∏—Ö —á–∞—Å—Ç–∏—Ü '
                                         '–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 25 –º–∫–≥—Ä/–º¬≥\n'
                                         '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–¥–µ—Å—å:\n'
                                         'https://habr.com/ru/company/tion/blog/396111/',
                                         reply_markup=KB_START2))


@dp.message_handler(commands=['now'])
async def send_now(message: aiogram.types.Message):
    now = graphics.read_last()
    asyncio.ensure_future(message.answer(f'–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –≤ {now["Time"]}\n\n'
                                         f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {now["Temp"]} ¬∞C\n'
                                         f'–î–∞–≤–ª–µ–Ω–∏–µ: {now["Pres"]} –º–º/—Ä—Ç.—Å—Ç.\n'
                                         f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {now["Humidity"]} %\n'
                                         f'–ß–∞—Å—Ç–∏—Ü—ã PM2.5: {now["PM2.5"]} –º–∫–≥—Ä/–º¬≥\n'
                                         f'–ß–∞—Å—Ç–∏—Ü—ã PM10: {now["PM10"]} –º–∫–≥—Ä/–º¬≥'))


@dp.message_handler(commands=['raw'])
async def send_raw_kb(message: aiogram.types.Message):
    KB_DATES = aiogram.types.InlineKeyboardMarkup()
    dates = graphics.dates()
    for date in dates:
        pretty_date = date.replace('-', '.')
        BT_temp = aiogram.types.InlineKeyboardButton(pretty_date, callback_data='+raw+' + date)
        KB_DATES.add(BT_temp)
    today = datetime.now()
    BT_temp = aiogram.types.InlineKeyboardButton(today.strftime('%d.%m.%Y'), callback_data='+raw+' + today.strftime('%d-%m-%Y'))
    KB_DATES.add(BT_temp)
    asyncio.ensure_future(message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', reply_markup=KB_DATES))


@dp.callback_query_handler(lambda c: (c.data and c.data.startswith("+raw")))  # TODO rewrite callbacks data
async def send_raw_file(callback_query: aiogram.types.CallbackQuery):
    await BOT.send_chat_action(callback_query.message.chat.id, aiogram.types.ChatActions.UPLOAD_DOCUMENT)
    date = callback_query.data[5::]
    file_path = graphics.data_path + date + '.csv'
    with open(file_path, 'rb') as f:
        doc = aiogram.types.InputFile(f, filename = date + '.csv')
        await callback_query.message.answer_document(doc)


@dp.message_handler(commands=["graph"])
async def send_graph_kb(message: aiogram.types.Message):
    asyncio.ensure_future(message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫:',
                                         reply_markup=KB_CHOOSE_TIME))


@dp.callback_query_handler(lambda c: (c.data and c.data.startswith("+month") and c.data.find("=") != -1))
async def plot_graph_month(callback_query: aiogram.types.CallbackQuery):
    code = callback_query.data[1::].split("=")
    parameter, code = code[1], code[0]
    photo = graphics.plot_month(graphics.read_month(parameter), parameter)
    if photo:
        param_str = graphics.parameter_to_str(parameter).capitalize()
        asyncio.ensure_future(callback_query.message.answer_photo(photo,
                                                                    caption=f'{param_str} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü'))
        asyncio.ensure_future(callback_query.answer())
    else:
        asyncio.ensure_future(callback_query.answer(text='–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö üòî',
                                                    show_alert=True))


@dp.callback_query_handler(lambda c: (c.data and c.data.startswith("+day") and c.data.find("=") != -1))
async def plot_graph_day(callback_query: aiogram.types.CallbackQuery):  # TODO: period of time chooser
    code = callback_query.data[1::].split("=")
    parameter, code = code[1], code[0]
    date = code.split("+")
    code, date = date[0], date[1]
    date = [int(i) for i in date.split("-")]
    plot_data = graphics.read_csv_timedelta(parameter, 
                                            datetime(date[2], date[1], date[0], 0, 0, 0), 
                                            datetime(date[2], date[1], date[0], 23, 59, 59))
    if plot_data:
        photo = graphics.plot_day(plot_data, parameter)
        if photo:
            param_str = graphics.parameter_to_str(parameter).capitalize()
            asyncio.ensure_future(callback_query.message.answer_photo(photo,
                                                                      caption=f'{param_str} –∑–∞: '
                                                                              f'{date[0]}.{date[1]}.{date[2]}')
                                    )
            asyncio.ensure_future(callback_query.answer())
        else:
            asyncio.ensure_future(callback_query.answer(text='–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö üòî',
                                                        show_alert=True))
    else:
        asyncio.ensure_future(callback_query.answer(text='–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö üòî',
                                                    show_alert=True))


@dp.callback_query_handler(lambda c: (c.data and (c.data[0:3] in ['+15', '+30', '+60'] or c.data.startswith('+180')) and c.data.find("=") != -1))
async def plot_graph_minutes(callback_query: aiogram.types.CallbackQuery):
    code = callback_query.data[1::].split("=")
    parameter, code = code[1], code[0]
    plot_data = graphics.read_csv_timedelta(parameter, datetime.now(),
                                            datetime.now() - timedelta(minutes=int(code)))
    if plot_data:
        photo = graphics.plot_minutes(plot_data, parameter)
        if photo:
            param_str = graphics.parameter_to_str(parameter).capitalize()
            asyncio.ensure_future(callback_query.message.answer_photo(photo,
                                                                        caption=f'{param_str} –∑–∞ '
                                                                                f'{graphics.time_to_str(code)}'))
            asyncio.ensure_future(callback_query.answer())
        else:
            asyncio.ensure_future(callback_query.answer(text='–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö üòî',
                                                        show_alert=True))
    else:
        asyncio.ensure_future(callback_query.answer(text='–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö üòî',
                                                    show_alert=True))


@dp.callback_query_handler(lambda c: (c.data and c.data.startswith("+") and c.data != '+day' and c.data.find("=") == -1))
async def add_parameter(callback_query: aiogram.types.CallbackQuery):
    if callback_query.data == "+month" and not graphics.dates():
        asyncio.ensure_future(callback_query.answer(text='–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö üòî',
                                                    show_alert=True))
        return
    bt_pm25      = aiogram.types.InlineKeyboardButton('–ß–∞—Å—Ç–∏—Ü—ã PM2.5', callback_data=callback_query.data+'=PM2.5')
    bt_pm10      = aiogram.types.InlineKeyboardButton('–ß–∞—Å—Ç–∏—Ü—ã PM10',  callback_data=callback_query.data+'=PM10')
    bt_temp      = aiogram.types.InlineKeyboardButton('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',   callback_data=callback_query.data+'=Temp')
    bt_pres      = aiogram.types.InlineKeyboardButton('–î–∞–≤–ª–µ–Ω–∏–µ',      callback_data=callback_query.data+'=Pres')
    bt_humidity  = aiogram.types.InlineKeyboardButton('–í–ª–∞–∂–Ω–æ—Å—Ç—å',     callback_data=callback_query.data+'=Humidity')
    KB_PARAMETER = aiogram.types.InlineKeyboardMarkup()
    KB_PARAMETER.row(bt_pm25, bt_pm10)
    KB_PARAMETER.row(bt_temp)
    KB_PARAMETER.row(bt_pres, bt_humidity)
    asyncio.ensure_future(callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:', reply_markup=KB_PARAMETER))


@dp.callback_query_handler(lambda c: (c.data and c.data == '+day'))
async def select_day(callback_query: aiogram.types.CallbackQuery):
    KB_DATES = aiogram.types.InlineKeyboardMarkup()
    dates = graphics.dates()
    if dates:
        for date in dates:
            pretty_date = date.replace('-', '.')
            BT_temp = aiogram.types.InlineKeyboardButton(pretty_date, callback_data='+day+' + date)
            KB_DATES.add(BT_temp)
        asyncio.ensure_future(callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', reply_markup=KB_DATES))
    else:
        asyncio.ensure_future(callback_query.answer(text='–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö üòî',
                                                    show_alert=True))


@dp.message_handler(lambda msg: (str(msg.from_user.id) in ADMIN_ID), commands=["admin", "log", "clear_log", "back"])
async def admin_commands(message: aiogram.types.Message):
    if message.get_command() == "/admin":
        asyncio.ensure_future(message.answer(f'–ù–∞–∫–æ–Ω–µ—Ü —Ç–æ –º–æ–π –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω {message.from_user.first_name} '
                                             f'–¥–æ–±—Ä–∞–ª—Å—è –¥–æ —Ä–∞–∑–¥–µ–ª–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!\n\n'
                                             f'‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /log –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤,'
                                             f' /clear_log –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç—á–∏—Å—Ç–∏—Ç—å\n'
                                             f'‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /back –¥–ª—è '
                                             f'–≤–æ–∑–≤—Ä–∞—à–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                                             reply_markup=KB_ADMIN))
    elif message.get_command() == "/log":
        await BOT.send_chat_action(message.chat.id, aiogram.types.ChatActions.UPLOAD_DOCUMENT)
        with open(f'{path}bot.log', 'rb') as f:
            doc = aiogram.types.InputFile(f, filename='log.txt')
            await message.answer_document(doc)
    elif message.get_command() == "/clear_log":
        with open(path + 'bot.log', 'w'):  # log clearing
            pass
        logging.info('Cleared log')
        asyncio.ensure_future(message.answer('–õ–æ–≥ –±—ã–ª –æ—Ç—á–∏—â–µ–Ω!'))
    elif message.get_command() == "/back":
        asyncio.ensure_future(message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üòâ', reply_markup=KB_START2))

if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True)
