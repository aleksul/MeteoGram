#!/usr/bin/python3.8
from asyncio import new_event_loop, set_event_loop, gather

from aiogram import Bot as aiogram_bot, Dispatcher, executor as aiogram_executor
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import Message, CallbackQuery
from aiogram.types import ChatActions, InputFile

from proxy_helper import ProxyGrabber, check_site
from plotter import Plotter
from database import DatabaseHandler
import logging
from os import environ, remove
from datetime import datetime, timedelta

DIRECTORY = "/code/"
LOG_FILENAME = "bot.log"
logging.basicConfig(
    filename=DIRECTORY + LOG_FILENAME,
    format="%(asctime)s    %(levelname)s: %(message)s",
    datefmt="%d/%m/%Y %H:%M:%S",
    level=logging.INFO,
)
logging.info("Program started")

ADMIN_ID = environ.get("ADMIN_IDs", "").split(",")
BOT_TOKEN = environ.get("BotToken")
assert BOT_TOKEN is not None, "Bot token was NOT set"

KB_START = ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True, row_width=2)
KB_START.add("/now", "/graph", "/help")
KB_START2 = ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
KB_START2.add("/now", "/graph")
KB_ADMIN = ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True, row_width=2)
KB_ADMIN.add("/log", "/clear_log", "/back")


async def doWeNeedProxy() -> bool:
    # internet connection test
    results = await gather(
        check_site("http://example.org/"),
        check_site(f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"),
    )
    logging.info(f"Internet test results:" f"example.org: {results[0]}, " f"telegram: {results[1]}")
    if not results[0]:  # we dont have internet access
        raise OSError("No internet")
    elif (results[0] and not results[1]):  # we have internet access but no access to telegram
        return True
    elif results[0] and results[1]:  # we have access to telegram without proxy!
        return False


db = DatabaseHandler(db_path="sqlite:///meteo_data/data.db")
graphics = Plotter()

loop = new_event_loop()
set_event_loop(loop)

BOT: aiogram_bot
if loop.run_until_complete(doWeNeedProxy()):
    proxyFinder = ProxyGrabber(
        timeout=3,
        filename=f"{DIRECTORY}proxy.dat",
        site_to_test=f"https://api.telegram.org/bot{BOT_TOKEN}/getMe",
    )
    BOT = aiogram_bot(token=BOT_TOKEN, proxy=loop.run_until_complete(proxyFinder.grab()))
else:
    BOT = aiogram_bot(token=BOT_TOKEN)
dp = Dispatcher(BOT)


@dp.message_handler(commands=["start"])
async def send_welcome(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}! \n"
        f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ "
        f"—É–∑–Ω–∞—Ç—å –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ –≤ –¢—Ä–æ–∏—Ü–∫–µ!\n\n"
        f"–î–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞–ø–∏—à–∏ /help",
        reply_markup=KB_START,
    )


@dp.message_handler(commands=["help"])
async def send_help(message: Message):
    await message.answer(
        "–í—Å–µ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ –ø—Ä–æ—Å—Ç–æ:\n"
        "‚Ä¢ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø–∏—à–∏ /now\n"
        "‚Ä¢ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–ø–∏—à–∏ /graph\n"
        "‚Ä¢ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—ã—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞–ø–∏—à–∏ /raw\n\n"
        "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π?\n"
        "–ù–∞–ø–∏—à–∏ /info",
        reply_markup=KB_START2,
    )


@dp.message_handler(commands=["info"])
async def send_info(message: Message):
    await message.answer(
        "–ì–¥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–∞–º–µ—Ä?\n"
        "–ú–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è —Ä–∞—Å–ø–æ–ª–≥–∞–µ—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: "
        "–≥.–ú–æ—Å–∫–≤–∞, –≥.–¢—Ä–æ–∏—Ü–∫, "
        '–°–∏—Ä–µ–Ω–µ–≤—ã–π –±—É–ª—å–≤–∞—Ä, –¥.1, —Å–Ω–∞—Ä—É–∂–∏ "–¢–æ—á–∫–∏ –ö–∏–ø–µ–Ω–∏—è"\n\n'
        "–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –¥–Ω—è?\n"
        "4:00-10:00 - —É—Ç—Ä–æ\n"
        "10:00-16:00 - –¥–µ–Ω—å\n"
        "16:00-22:00 - –≤–µ—á–µ—Ä\n"
        "22:00-4:00 - –Ω–æ—á—å\n\n"
        "–ß—Ç–æ —Ç–∞–∫–æ–µ —á–∞—Å—Ç–∏—Ü—ã PM2.5 –∏ PM10?\n"
        "–≠—Ç–æ –º–µ–ª–∫–æ–¥–∏—Å–ø–µ—Ä—Å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –ø—ã–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ, "
        '–±—É–∫–≤–∞–ª—å–Ω–æ, "–≤–∏—Ç–∞—é—Ç –≤ –≤–æ–∑–¥—É—Ö–µ". '
        "–ò–∑-–∑–∞ –∏—Ö –º–∞–ª—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ "
        "(2.5 –º–∫–º –∏ 10 –º–∫–º —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ) "
        "–∏ –≤–µ—Å–∞ –æ–Ω–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –æ—Å—è–¥–∞—é—Ç, "
        "—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∑–∞–≥—Ä—è–∑–Ω—è—è"
        " –≤–æ–∑–¥—É—Ö, –∫–æ—Ç–æ—Ä—ã–º –º—ã –¥—ã—à–∏–º.\n"
        "–°–æ–≥–ª–∞—Å–Ω–æ –í–û–ó, —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —ç—Ç–∏—Ö —á–∞—Å—Ç–∏—Ü "
        "–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 25 –º–∫–≥—Ä/–º¬≥\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–¥–µ—Å—å:\n"
        "https://habr.com/ru/company/tion/blog/396111/",
        reply_markup=KB_START2,
    )


@dp.message_handler(commands=["now"])
async def send_now(message: Message):
    now = await db.getLastData()
    await message.answer(f'–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –≤ {now["time"].strftime("%H:%M:%S")}\n\n'
                         f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {now["temperature"]} ¬∞C\n'
                         f'–î–∞–≤–ª–µ–Ω–∏–µ: {now["pressure"]} –º–º/—Ä—Ç.—Å—Ç.\n'
                         f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {now["humidity"]} %\n'
                         f'–ß–∞—Å—Ç–∏—Ü—ã PM2.5: {now["pm25"]} –º–∫–≥—Ä/–º¬≥\n'
                         f'–ß–∞—Å—Ç–∏—Ü—ã PM10: {now["pm10"]} –º–∫–≥—Ä/–º¬≥')


@dp.message_handler(commands=["raw"])
async def send_raw_kb(message: Message):
    KB_DATES = InlineKeyboardMarkup(row_width=3)
    dates = await db.getAllDates(includeToday=True)
    if len(dates) > 30:
        dates = dates[0:30]
    dates.reverse()
    for day in dates:
        BT_day = InlineKeyboardButton(day.strftime("%d.%m.%Y"),
                                      callback_data="=raw+" + day.strftime("%d-%m-%Y"))
        KB_DATES.insert(BT_day)
    await message.answer("> –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=KB_DATES)


@dp.callback_query_handler(lambda c: (c.data and c.data.startswith("=raw")))
async def send_raw_file(callback_query: CallbackQuery):
    await BOT.send_chat_action(callback_query.message.chat.id, ChatActions.UPLOAD_DOCUMENT)
    strDate = callback_query.data.split("+")[1]
    day = datetime.strptime(strDate, "%d-%m-%Y").date()
    fi = await db.getRawDataByDay(day)
    with open(fi.name, "rb") as f:
        doc = InputFile(f, filename=strDate + ".csv")
        await callback_query.message.answer_document(doc)
    remove(fi.name)
    await callback_query.answer()


def isValueCorrect(value: str) -> bool:
    return value.lower() in [
        "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        "–¥–∞–≤–ª–µ–Ω–∏–µ",
        "–≤–ª–∞–∂–Ω–æ—Å—Ç—å",
        "pm25",
        "pm2.5",
        "pm10",
    ]


def translateParameter(value: str) -> str:
    translation = {
        "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "temperature",
        "–¥–∞–≤–ª–µ–Ω–∏–µ": "pressure",
        "–≤–ª–∞–∂–Ω–æ—Å—Ç—å": "humidity",
        "pm25": "pm25",
        "pm2.5": "pm25",
        "pm10": "pm10",
    }
    return translation.get(value)


@dp.message_handler(commands=["graph"])
async def send_graph_kb(message: Message):
    data = message.text[6:].split(",")
    data = [i.strip() for i in data if i.strip()]
    if not data:
        await message.answer("–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫"
                             "–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n –ü—Ä–∏–º–µ—Ä 1: "
                             "/graph —á–∞—Å –Ω–∞–∑–∞–¥, —Å–µ–π—á–∞—Å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\n"
                             "–ü—Ä–∏–º–µ—Ä 2: /graph –¥–µ–Ω—å, 25.05.21, –≤–ª–∞–∂–Ω–æ—Å—Ç—å\n"
                             "–ü—Ä–∏–º–µ—Ä 3: /graph –º–µ—Å—è—Ü, pm2.5")
    elif data[0] == "–º–µ—Å—è—Ü":
        photo: bytes
        try:
            # checks
            if len(data) != 2:
                await message.answer("–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!")
                return
            if not isValueCorrect(data[1]):
                await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ!\n"
                                     "–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ"
                                     ", –≤–ª–∞–∂–Ω–æ—Å—Ç—å, pm2.5, pm10")
                return
            # graph building
            parameter = translateParameter(data[1])
            month_data = await db.getMonthData(parameter)
            photo = graphics.plot_month(month_data, parameter)
        except Exception as e:
            logging.warning(f"Plotting month graph error: {type(e)}: {e}")
            await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ üòî")
        else:
            await BOT.send_chat_action(message.chat.id, ChatActions.UPLOAD_PHOTO)
            await message.answer_photo(
                photo, caption=f"{graphics.valueToStr(parameter)} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
    elif data[0] == "–¥–µ–Ω—å":
        pass
    else:
        pass


@dp.message_handler(
    lambda msg: (str(msg.from_user.id) in ADMIN_ID),
    commands=["admin", "log", "clear_log", "back"],
)
async def admin_commands(message: Message):
    # handels only messages from admins, only special commands

    if message.get_command() == "/admin":
        await message.answer(
            f"–ù–∞–∫–æ–Ω–µ—Ü —Ç–æ –º–æ–π –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω "
            f"{message.from_user.first_name} "
            f"–¥–æ–±—Ä–∞–ª—Å—è –¥–æ —Ä–∞–∑–¥–µ–ª–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!\n\n"
            f"‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /log –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤,"
            f" /clear_log –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç—á–∏—Å—Ç–∏—Ç—å\n"
            f"‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /back –¥–ª—è "
            f"–≤–æ–∑–≤—Ä–∞—à–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
            reply_markup=KB_ADMIN,
        )
    elif message.get_command() == "/log":
        # sends log file
        await BOT.send_chat_action(message.chat.id, ChatActions.UPLOAD_DOCUMENT)
        with open(DIRECTORY + LOG_FILENAME, "rb") as f:
            doc = InputFile(f, filename="log.txt")
            await message.answer_document(doc)
    elif message.get_command() == "/clear_log":
        with open(DIRECTORY + LOG_FILENAME, "w"):  # log clearing
            pass
        logging.info("Cleared log")
        await message.answer("–õ–æ–≥ –±—ã–ª –æ—Ç—á–∏—â–µ–Ω!")
    elif message.get_command() == "/back":  # gives back standart keyboard layout
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üòâ", reply_markup=KB_START2)


if __name__ == "__main__":
    aiogram_executor.start_polling(dp, skip_updates=True)
